require_relative "dependencies"

FigNewton.load("staging.yml")

Capybara.default_max_wait_time = 10
Capybara.default_driver = :selenium

SauceWhisk.username = FigNewton.sauce_labs.username
SauceWhisk.access_key = FigNewton.sauce_labs.access_key

Before do | scenario |
  jobname = "#{scenario.feature.name} - #{scenario.name}"

  Capybara.register_driver :selenium do | app|
    capabilities = {
      :version => '54',
      :browserName => 'firefox',
      :platform => 'OS X 10.11'
    }
    url = "https://#{FigNewton.sauce_labs.username}:#{FigNewton.sauce_labs.access_key}@ondemand.saucelabs.com:443/wd/hub".strip

    Capybara::Selenium::Driver.new(app,
                                   :browser => :remote, :url => url,
                                   :desired_capabilities => capabilities)
  end

  # Capybara.current_driver = :remote
  Capybara.session_name = "#{jobname} - OSX - FireFox - 54"

  @driver = Capybara.current_session.driver

  # Output sessionId and jobname to std out for Sauce OnDemand Plugin to display embeded results
  @session_id = @driver.browser.session_id
  puts "SauceOnDemandSessionID=#{@session_id} job-name=#{jobname}"
end

After do | scenario |
  @driver.quit
  Capybara.use_default_driver
  
  if scenario.failed?
    SauceWhisk::Jobs.fail_job @session_id
  else
    SauceWhisk::Jobs.pass_job @session_id
  end
end

# Include helper methods module in each "World" instance
World(HelperMethods)
